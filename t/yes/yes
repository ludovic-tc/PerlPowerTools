#!/usr/bin/env perl

# tryout script for running PPT's 'yes' in a child process
# and reading from it without blocking

use strict;
use warnings;

$|++; # autoflush both processes (superfluous?)

my ($pid, $child);

# default path to yes from PPT Git repo root
my $default_ppt_yes = './bin/yes';

# Update path to PPT yes if different to default,
# or to compare with other yes implementations,
# e.g. /usr/bin/yes.
my $ppt_yes_path = defined($ARGV[0]) ? $ARGV[0] : $default_ppt_yes;

die "Can't find 'yes' script at $ppt_yes_path\n"
    unless (-e $ppt_yes_path && -f $ppt_yes_path);

# fork and run yes in child process via open '-|'
if ($pid = open($child, '-|', $ppt_yes_path)) {
    # PARENT PROCESS
    # run parent code, reading from child
    print "Parent PID: $$\nChild PID: $pid\n";

    my @lines;
    for (1..10) {
        # NOTE <> must be called in scalar context to prevent blocking.
        my $line = <$child>;
        push @lines, $line;
    }
    # Set output field separator to empty string
    # to prevent outdenting of all but first 'y'.
    local $" = '';
    print "Child Output:-\n@lines";

    close($child); # apparently gratuitous
} else {
    die "cannot fork:$!\n" unless defined $pid;
    # CHILD PROCESS
    exit; # apparently gratuitous
}

